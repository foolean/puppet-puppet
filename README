puppet

This module handles the management of puppet agents as well as the
puppetmaster.  This module also provides for the management of additional
environments for the purposes of providing puppet services to disparate
sites.  This essentially provides for CM as a service.


Example
-------

    node myagent {
        class { 'puppet':
            mode => 'agent',
        }
    }

    # accomplishes the same thing done for 'myagent' above
    node myotheragent {
        class { 'puppet': }
    }

    node mymaster {
        class { 'puppet':
            mode  => 'master',
            sites => {
                'site1' => {
                    clients    => [ 'host1', 'host2', etc ],
                },
            },
        }

        puppet::module { 'foolean::ssh': }
    }

    # A puppetmaster running passenger
    node myothermaster {
        class { 'puppet':
            mode    => 'passenger',
            workers => 5,
            sites   => {
                'site1' => {
                    clients    => [ 'host1', 'host2', etc ],
                },
            },
        }

        puppet::module { 'foolean::ssh': }
    }

About this module
-----------------

Q. Why is there a master/defaults.pp.example file?

The defaults.pp file is the central place where the 'main', 'agent', and
'master' configuration blocks are kept.  The classes rely on a the central
configurations to make life a little bit easier and I didn't want future
module upgrades to destroy any custom configurations an admin may have
created.

Q. Why not use Heira?

Future versions may, in fact, become Heira aware.

Q. Shouldn't the Apache2 controls be in an Apache module instead of here?

This is an experiment to see if it is posisble to have this class be
indepedent of any other classes.  Ordinarily functionality such as the
Apache2 controls would be handled by an Apache module so that enhancements
will be carried through to all classes who utilize it.  The a2ensite,
a2dissite, and a2enmod defines are innocuous enough that their structure
should not need to change.   It is also the hopes of this module that
it will not conflict with other Apache modules.  In the future, a Foolean
Apache module will be created.  This module may depend on the Apache
module only if conflicts can not be avoided.   In the end, this is all
an attempt to publish useful modules without having to foist additional
modules upon the adopter.



Supported Operating Systems
---------------------------

Primary development is done on Debian and then validated against other
operating systems.  The current list of supported operating systems is:

    * Debian

    puppet::master::bootstrap is known to work on:

    * CentOS
    * Debian
    * Fedora
    * OpenSUSE
    * RedHat
    * Ubuntu



Directory Structure
-------------------

To facilitate host multiple sites, this module creates and relies on the
following directory structure.

    ${settings::vardir}/sites
    `-- default
        |-- development
        |   |-- manifests
        |   |   `-- site.pp
        |   |-- modules
        |   |   |-- puppet
        |   |   `-- [ other modules ]
        |   |-- private
        |       `-- [ fqdn ]
        `-- production
            |-- manifests
            |   `-- site.pp
            |-- modules
            |   |-- puppet
            |   `-- [ other modules ]
            |-- private
                `-- [ fqdn ]



File and Directory Permissions
------------------------------

Puppet, by default, will attempt to manage the permissions and ownership
of the various files within the $vardir structure.  In doing so a number
of the objects will end up with world readable permissions and ownership
other than the puppet user or group.  In order to allow this module to
manage the permissions and ownership the 'manage_internal_file_permissions'
options is set to 'false' in the main configuration block of puppet.conf.

This module will then to remove all 'world' permissions and set ownership
to the puppet user and puppet group as there is really no reason for any
other users to access the puppet files.   The premis is that only an
administrator (e.g. someone with root) should be running puppet on a
system.  Likewise only an administrator or someone in the puppet group
should be looking at any of the puppet files.

Even with all of this there are still a couple of areas where puppet
itself still tries to enforce ownership.


Requirements
------------

This module requires puppet version 2.7 or greater.

For CentOS and RedHat this can be found on the RepoForge site as the EPEL site
is still publishing v2.6.18

Note: Even as of SLES 11-SP3, Novell SUSE is still using v2.6.18.


Packaging
---------

Creating the package (tarball) that can be installed using puppet's module
function is simple.  Run the following command while in the top of the module
directory (e.g. /usr/src/puppet-puppet).

    puppet module build .

The resulting tarball will be named foolean-puppet-$VER.tar.gz and can be found
in the "pkg" directory within the source tree.


PuppetForge Installation
------------------------

Foolean Puppet is on PuppetLab's PuppetForge making installation as simple as:

    puppet module install foolean/puppet


Manual Installation
-------------------

When we're installing from a tarball the installation and upgrade process
is the same.  You'll need to set --modulepath if f you're installing the
module in a path other than the location defined in puppet.conf.

    MODULEPATH=/var/lib/puppet/modules
    puppet module install         \
        --force                   \
        --ignore-dependencies     \
        --module-path $MODULEPATH \
        $PATHTO/foolean-puppet-$VER.tar.gz


Bootstrapping
-------------

When going for complete deterministic installations we will quickly find
ourselves in chicken/egg territory.  We use puppet to ensure determinism
in our systems but how do we get puppet onto a new puppetmaster when an
existing puppetmaster doesn't exist?  That is the purpose of the 
"bootstrap.pp" file.  The first time the operating system comes up after
install the following steps can be run to bootstrap the puppetmaster.

    # install puppet
    apt-get install puppet

    # retrieve the bootstrap.pp file
    wget https://raw.github.com/foolean/puppet-puppet/master/manifests/master/bootstrap.pp

    # run the bootstrap process (add --noop if you want to review first)
    puppet apply --detailed-exitcodes --verbose ./bootstrap.pp

    # run puppet again to configure the system as a puppetmaster
    puppet agent --test


To Do
-----

    * Add passenger support


License
-------

Copyright (c) 2013 Foolean.org

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


Contact
-------
bennett@foolean.org
